// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 *
 *
 *   Output the value stored at address[15]
 *   If load=1, in[16] loaded address[15]
 *
 *   ram 0-16383
 *   screen 16384-24575
 *   keyboard 24576
 *   16384 = 0100 0000 0000 0000 14th digit is 1, 15th is 0
 *   24576 = 0110 0000 0000 0000 14th + 13th are 1
 *   And(a=address[14], b=load, out=screen_load);
 *   Not(in=address[13], out=address13);
 *   And(a=screen_load, b=address13, out=screenflag);
 *
 *   And(a=address[14], b=address[13], out=keyboard_mem);
 *   And(a=keyboard_mem, b=load, out=keyboardflag);
 *
 *   And(a=screenflag, b=keyboardflag, out=screenkeyboard);
 *   Xor(a=screenkeyboard, b=load, out=ramflag);
 *
 *   10 - screen
 *   11 - keyboard
 *   else - ram
 *
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];
    PARTS:

    DMux4Way(in=true, sel=address[13..14], a=raml, b=ramk, c=screenl, d=keyl);
    And(a=load, b=raml, out=loadram1);
    And(a=load, b=ramk, out=loadram2);
    Or(a=loadram1, b=loadram2, out=loadram);
    And(a=load, b=screenl, out=loadscreen);

    RAM16K(in=in, load=loadram, address=address[0..13], out=ramout);
    Screen(in=in, load=loadscreen, address=address[0..12], out=screenout);
    Keyboard(out=keyboardout);

    Mux4Way16(a=ramout, b=ramout, c=screenout, d=keyboardout, sel=address[13..14], out=out);
}
